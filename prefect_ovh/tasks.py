"""This is an example tasks module"""
import datetime
import json
import time

from ov_hcloud_ai_solution_client import AuthenticatedClient
from ov_hcloud_ai_solution_client.api.job import (
    job_delete,
    job_get,
    job_kill,
    job_log,
    job_new,
    job_start,
)
from ov_hcloud_ai_solution_client.api.me import me
from ov_hcloud_ai_solution_client.models import Job, JobSpec, Me
from ov_hcloud_ai_solution_client.types import Response
from prefect import task
from prefect.exceptions import PrefectException


@task
def create_client(token: str) -> AuthenticatedClient:
    """Create an authenticated client for the SDK python
    We test if your token is correct

    Args:
        token (str): Your bearer token from OVHcloud

    Raises:
        PrefectException: If your token is not valid

    Returns:
        AuthenticatedClient: Your client authenticated
    """
    client = AuthenticatedClient(
        base_url="https://gra.training.ai.cloud.ovh.net", token=token
    )
    with client as client:
        response: Me = me.sync_detailed(client=client)
    if response.status_code == 200:
        # Because client can make one call to the api we recreate a client
        client = AuthenticatedClient(
            base_url="https://gra.training.ai.cloud.ovh.net", token=token
        )
        return client
    else:
        raise PrefectException("Your token is not valid " + response.content.decode())


@task
def create_a_job(
    token,
    image,
    http_port=8080,
    command=[],
    listEnvVars=[],
    dicLabels={},
    name=None,
    cpu=0,
    gpu=1,
    sshPublicKeys=[],
    volumes=[],
    timeout=3600,
    wait_seconds=3,
) -> Response[Job]:
    """Create your first job and wait until he is finished

    Args:
        token (str):  your bearer token with AI operator role
        image (str): your docker image
        http_port (int, optional): the http port of the app.
            Defaults to 8080.
        command (list, optional): the command to run inside the docker container.
            Defaults to [].
        listEnvVars (list, optional): Une liste de variables d'environnement.
            Defaults to [].
        dicLabels (dict, optional): Un dictionnaire des labels du job.
            Defaults to {}.
        name (_type_, optional): la nom du job. Defaults to None.
        cpu (int, optional): le nombre de cpu dans le job. Defaults to 0.
        gpu (int, optional): le nombre de gpu dans le job. Defaults to 1.
        sshPublicKeys (list, optional): un tableau de string avec les cl√©es ssh.
            Defaults to [].
        volumes (list, optional): le tableau avec les swift containers ou les repo git.
            Defaults to [].
        timeout (float, optional): la limite de temps pour executer le job.
            Defaults to 3600 (1 hour)
        wait_seconds (float, optional): the duration beetween each call to get
            the state of the job. Defaults to 3 (3 seconds)

    Raises:
        PrefectException: Raise this exception if job can't be create
    Returns:
        Response[Job]: The content of the job submitted
    """
    # First of all we create the request to send to the core API
    request = {
        "command": command,
        "defaultHttpPort": http_port,
        "deletionRequested": False,
        "envVars": listEnvVars,
        "labels": dicLabels,
        "image": image,
        "name": name,
        "resources": {"cpu": cpu, "gpu": gpu},
        "sshPublicKeys": sshPublicKeys,
        "volumes": volumes,
    }
    # If there is no name, it will be auto generated by OVHcloud
    if name is None:
        name = request.pop("name")
    # If CPU is indicated, we set the number of gpu to 0
    if cpu != 0:
        request.update({"resources": {"cpu": cpu, "gpu": 0}})
    # Create a unique client for python SDK
    client = AuthenticatedClient(
        base_url="https://gra.training.ai.cloud.ovh.net", token=token
    )
    # Submit the job to OVHcloud
    with client as client:
        response: Response[Job] = job_new.sync_detailed(
            client=client, json_body=JobSpec.from_dict(request)
        )
    # Get the time where the job has been submitted
    start = time.monotonic()
    # We check if the job is submitted to the AI Training tool
    if response.status_code != 200:
        raise PrefectException(
            "You Job can't be run !, here is the reason :", response.content.decode()
        )
    # We get the content of the response
    response_content = response.content.decode()
    # We transform the response as a dict
    response_dict = json.loads(response_content)
    # We get the id of the job
    id = response_dict["id"]
    # At regular intervals, we check whether the job has been completed
    state = response_dict["status"]["state"]
    # While the job is not done or failed we check the job's status
    while (
        state != "DONE"
        and state != "INTERRUPTED"
        and state != "FAILED"
        and state != "ERROR"
    ):
        # Send a message with the state of the job
        if state != "DONE":
            print(
                datetime.datetime.now(datetime.timezone.utc),
                f" [prefect] Wait, your job {id} is in state ",
                state,
            )
        if timeout and start + timeout < time.monotonic():
            # We stop the job
            client = AuthenticatedClient(
                base_url="https://gra.training.ai.cloud.ovh.net", token=token
            )
            with client as client:
                response: Response[Job] = job_kill.sync_detailed(id=id, client=client)
            # We check if he has been stopped and send a prefect exeception
            if response.status_code != 200:
                raise PrefectException(
                    f"Timeout exceeded for the job {id} ! and we can't stop it !"
                )
            else:
                raise PrefectException(
                    f"Timeout exceeded for the job {id}, he has been stopped"
                )
        # Wait 10 seconds
        time.sleep(wait_seconds)
        # Make a new call to get the status
        client = AuthenticatedClient(
            base_url="https://gra.training.ai.cloud.ovh.net", token=token
        )
        with client as client:
            response: Response[Job] = job_get.sync_detailed(id=id, client=client)
        # We check if you have the new informations of the job
        if response.status_code != 200:
            raise PrefectException(
                f"You Job {id} can't be run !, here is the reason :",
                response.content.decode(),
            )
        # We get the content of the response
        response_content = response.content.decode()
        # We transform the response as a dict
        response_dict = json.loads(response_content)
        state = response_dict["status"]["state"]
        # We check if the run is not broken
        if state == "INTERRUPTED" or state == "FAILED" or state == "ERROR":
            # Get the logs of the application
            client = AuthenticatedClient(
                base_url="https://gra.training.ai.cloud.ovh.net", token=token
            )
            with client as client:
                logs = job_log.sync_detailed(id=id, client=client)
            if logs.status_code != 200:
                raise PrefectException(f"We can't access the logs of your job {id}")
            else:
                if state == "INTERRUPTED":
                    raise PrefectException(
                        f"Your job {id} is interrupted, here are the logs \n"
                        + f"{logs.content.decode()}"
                    )
                if state == "FAILED":
                    raise PrefectException(
                        f"Your job {id} has failed, here are the logs \n"
                        + f"{logs.content.decode()}"
                    )
                if state == "ERROR":
                    raise PrefectException(
                        f"Your job {id} has an error in the parameter,"
                        + " here are the logs \n"
                        + f"{logs.content.decode()}"
                    )
    # We transform the response with only the string
    response = response.content.decode()
    # We transform the response as a dict
    response = json.loads(response)
    # We transform the response with a well format to see it
    response = json.dumps(response, indent=4)
    return response


@task
def get_infos_of_job(id_job: str, client: AuthenticatedClient) -> dict:
    """Get all infos of an OVHcloud's job
    Args:
        id_job (str): the id of the job
        client (AuthenticatedClient): The Authenticated client

    Raises:
        PrefectException: If the id of the job is wrong

    Returns:
        dict: The response in a json format
    """
    with client as client:
        response: Response[Job] = job_get.sync_detailed(id=id_job, client=client)
    # We check if the job is existing
    if response.status_code == 200:
        return json.loads(response.content.decode())
    else:
        raise PrefectException(
            "We can't get the infos of this job : " + response.content.decode()
        )


@task
def get_logs_of_job(id_job: str, client: AuthenticatedClient) -> str:
    """Get the logs of an OVHcloud's job

    Args:
        id_job (str): the id of the job
        client (AuthenticatedClient): The client for the SDK Python
    Raises:
        PrefectException: If we can't provide the logs of the job

    Returns:
        str: The response as a log from OVHcloud
    """
    with client as client:
        response: Response[Job] = job_log.sync_detailed(id=id_job, client=client)
    if response.status_code == 200:
        return response.content.decode()
    else:
        raise PrefectException(
            f"We can't get the logs of this job : {response.content.decode()}"
        )


@task
def start_an_existing_job(id_job: str, client: AuthenticatedClient) -> dict:
    """Start an existing job from AI Training

    Args:
        id_job (str): The id of the job
        client (AuthenticatedClient): the authenticated client for SDK python

    Raises:
        PrefectException: The exception if we can't start this job

    Returns:
        dict: the dictionnary with the information of the job
    """
    with client as client:
        response: Response[Job] = job_start.sync_detailed(id=id_job, client=client)
    if response.status_code == 200:
        return json.loads(response.content.decode())
    else:
        raise PrefectException(f"We can't start this job {response.content.decode()}")


@task
def stop_job(id_job: str, client: AuthenticatedClient) -> dict:
    """Stop an existing job from AI Training

    Args:
        id_job (str): The id of the job
        client (AuthenticatedClient): the authenticated client for SDK python

    Raises:
        PrefectException: The exception if we can't stop this job

    Returns:
        dict: the dictionnary with the information of the job
    """
    with client as client:
        response: Response[Job] = job_kill.sync_detailed(id=id_job, client=client)
    if response.status_code == 200:
        return json.loads(response.content.decode())
    else:
        raise PrefectException(f"We can't stop this job {response.content.decode()}")


@task
def delete_job(id_job: str, client: AuthenticatedClient) -> dict:
    """Delete an existing job from AI Training

    Args:
        id_job (str): The id of the job
        client (AuthenticatedClient): the authenticated client for SDK python

    Raises:
        PrefectException: The exception if we can't delete this job

    Returns:
        dict: the dictionnary with the information of the job
    """
    with client as client:
        response: Response[Job] = job_delete.sync_detailed(id=id_job, client=client)
    if response.status_code == 204:
        return id_job
    else:
        raise PrefectException("We can't delete this job ")
